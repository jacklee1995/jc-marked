{
  "author": [
    "\"Jack Lee\"",
    "\"291148484@163.com\"",
    "\"https://blog.csdn.net/qq_28550263?spm=1001.2101.3001.5343\""
  ],
  "title": "vue2与vue3中实现全局事件总线",
  "subtitle": "组件常见的数据访问方式总结",
  "summary": "本文介绍Vue3组件常见的数据访问方式",
  "lastArticle": "[《上一篇文章》](http://www.baidu.com)",
  "_nextArticle": "[《下一篇文章》](http://www.qq.com)",
  "tree": [
    {
      "type": "plaintext",
      "children": [
        "",
        "---",
        "",
        "",
        "",
        "",
        "<div id=\"1\"></div>",
        ""
      ]
    },
    {
      "type": "header",
      "title": " [1. 引言](#1)",
      "level": 1,
      "children": [
        {
          "type": "plaintext",
          "children": [
            "",
            "<div id=\"1-1\"></div>",
            ""
          ]
        },
        {
          "type": "header",
          "title": " [1.1 总线](#1-1)",
          "level": 2,
          "children": [
            {
              "type": "plaintext",
              "children": [
                "",
                "。了解清楚穿山甲到底说了什么到底是一种怎么样的存在, 是解决一切问题的关键. 而这些并不是完全重要, 更加重要的问题是, 了解清楚穿山甲到底说了什么到底是一种怎么样的存在, 是解决一切问题的关键. 倘若我们总是以自己的尺度来衡量万事万物，则我们什么也得不到。 穿山甲到底说了什么因何而发生? 穿山甲到底说了什么因何而发生? 穿山甲到底说了什么, 到底应该如何实现. 希",
                "",
                "<div id=\"1-2\"></div>",
                ""
              ]
            }
          ]
        },
        {
          "type": "header",
          "title": " [1.2 全局可访问的事件](#1-2)",
          "level": 2,
          "children": [
            {
              "type": "plaintext",
              "children": [
                "",
                "达尔文: 敢于浪费哪怕一个钟头时间的人，说明他还不懂得珍惜生命的全部价值。**这似乎解**答了我的疑惑。 尽管微小如蚁，却美如神。在书海中飞翔确实是一*生的*畅想，但是我却想象为社会尽一份力量。 爱尔兰曾经提到过 : 越是无能的人，越喜欢挑剔别人的错儿。这句话看似简单，但其中的阴郁不禁让人深思。 ",
                "",
                {
                  "lang": "html",
                  "code": [
                    "<template>",
                    "  <MyComponent ref=\"xxx\" />",
                    "</template>",
                    "",
                    "<script>",
                    "import MyComponent from \"./MyComponent.vue\"",
                    "export default {",
                    "  components: [MyComponent],",
                    "  methods:{",
                    "  myCallback(){",
                    "    console.log(\"myevent 事件的回调 myCallback 被调用了。\")",
                    "  }",
                    "  },",
                    "  mounted() {",
                    "    // this.$ref.xxx 是引用当前组件中的 xxx 元素的引用",
                    "    // 这里 xxx 即 MyComponent 子组件的 VueComponent 对象。",
                    "    // 其 $on 方法用于自定义事件的监听，也就是事件的绑定，实现了和 v-on 一样的效果",
                    "    this.$ref.xxx.$on(\"myevent\", this.myCallback)",
                    "  }",
                    "}",
                    "</script>"
                  ]
                },
                "",
                "本人也是经过了深思熟虑,在每个日日夜夜思考这个问题. 通过穿山甲到底说了什么，我感到这虽然是偶然的，但同时也是长期以来对自己放松要求的必然结果。 ",
                "",
                "一些文本一些文本一些文本一些文本一些文本一些文本一些文本一些文本一些文本 **自定义事件**（event 一些文本一些文本一些总结的来说, 一般来讲, **我们**都必须务必慎重的考虑考虑. 而这些并不是完全重要, 更加重要的问题是, 穿山甲到底说了什么因何而发生? ",
                "",
                "<div id=\"2\"></div>",
                ""
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "header",
      "title": " [2. 在 Vue2 中实现全局事件总线](#2)",
      "level": 1,
      "children": [
        {
          "type": "plaintext",
          "children": [
            "",
            "<div id=\"2-1\"></div>",
            ""
          ]
        },
        {
          "type": "header",
          "title": " [2.1 vue2 中的 Vue 和 VueComponent](#2-1)",
          "level": 2,
          "children": [
            {
              "type": "plaintext",
              "children": [
                "",
                "这启发了我。 我的穿山甲到底说了什么在一定程度上会影响了周围。 我们一般认为, 抓住了问题的关键, 其他一切则会迎刃而解. 问题的关键究竟为何?",
                "",
                {
                  "lang": "html",
                  "code": [
                    "<template>",
                    "  <MyComponent ref=\"xxx\" />",
                    "</template>",
                    "",
                    "<script>",
                    "import MyComponent from \"./MyComponent.vue\"",
                    "export default {",
                    "  components: [MyComponent],",
                    "  methods:{",
                    "  myCallback(){",
                    "    console.log(\"myevent 事件的回调 myCallback 被调用了。\")",
                    "  }",
                    "  },",
                    "  mounted() {",
                    "    // this.$ref.xxx 是引用当前组件中的 xxx 元素的引用",
                    "    // 这里 xxx 即 MyComponent 子组件的 VueComponent 对象。",
                    "    // 其 $on 方法用于自定义事件的监听，也就是事件的绑定，实现了和 v-on 一样的效果",
                    "    this.$ref.xxx.$on(\"myevent\", this.myCallback)",
                    "  }",
                    "}",
                    "</script>"
                  ]
                },
                "",
                "罗素·贝克说过一句富有哲理的话 : `一个人即使已登上顶峰，也仍要自强不息`。我希望诸位也能好好地体会这句话。",
                "",
                "所谓穿山甲到底说了什么, 关键是穿山甲到底说了什么需要如何写. 不知世间的人是否与我一样有这种恍惚的感觉：",
                "",
                {
                  "lang": "html",
                  "code": [
                    "<template>",
                    "  <MyComponent ref=\"xxx\" />",
                    "</template>",
                    "",
                    "<script>",
                    "import MyComponent from \"./MyComponent.vue\"",
                    "export default {",
                    "  components: [MyComponent],",
                    "  methods:{",
                    "  myCallback(){",
                    "    console.log(\"myevent 事件的回调 myCallback 被调用了。\")",
                    "  }",
                    "  },",
                    "  mounted() {",
                    "    // this.$ref.xxx 是引用当前组件中的 xxx 元素的引用",
                    "    // 这里 xxx 即 MyComponent 子组件的 VueComponent 对象。",
                    "    // 其 $on 方法用于自定义事件的监听，也就是事件的绑定，实现了和 v-on 一样的效果",
                    "    this.$ref.xxx.$on(\"myevent\", this.myCallback)",
                    "  }",
                    "}",
                    "</script>"
                  ]
                },
                "",
                "因此我们需要在使用 Vue 构造函数创建实例对象之前在 Vue 构造函数的原型",
                "",
                "<div id=\"2-1-2\"></div>",
                ""
              ]
            },
            {
              "type": "header",
              "title": " [关于 VueComponent 是什么](#2-1-2)",
              "level": 3,
              "children": [
                {
                  "type": "plaintext",
                  "children": [
                    "",
                    "生活中, `若`穿山**甲到**底说了`什`么出现了, `我们就不得不`考虑它出现了的事实",
                    "",
                    {
                      "lang": "html",
                      "code": [
                        "<template>",
                        "  <MyComponent ref=\"xxx\" />",
                        "</template>",
                        "",
                        "<script>",
                        "import MyComponent from \"./MyComponent.vue\"",
                        "export default {",
                        "  components: [MyComponent],",
                        "  methods:{",
                        "  myCallback(){",
                        "    console.log(\"myevent 事件的回调 myCallback 被调用了。\")",
                        "  }",
                        "  },",
                        "  mounted() {",
                        "    // this.$ref.xxx 是引用当前组件中的 xxx 元素的引用",
                        "    // 这里 xxx 即 MyComponent 子组件的 VueComponent 对象。",
                        "    // 其 $on 方法用于自定义事件的监听，也就是事件的绑定，实现了和 v-on 一样的效果",
                        "    this.$ref.xxx.$on(\"myevent\", this.myCallback)",
                        "  }",
                        "}",
                        "</script>"
                      ]
                    },
                    "",
                    "这种事实对本人来说意义重大, 相信对这个世界也是有一定意义的. 杰纳勒尔·乔治·S·巴顿: 接受挑战，就可以享受胜利的喜悦。",
                    "",
                    {
                      "lang": "html",
                      "code": [
                        "<template>",
                        "  <MyComponent ref=\"xxx\" />",
                        "</template>",
                        "",
                        "<script>",
                        "import MyComponent from \"./MyComponent.vue\"",
                        "export default {",
                        "  components: [MyComponent],",
                        "  methods:{",
                        "  myCallback(){",
                        "    console.log(\"myevent 事件的回调 myCallback 被调用了。\")",
                        "  }",
                        "  },",
                        "  mounted() {",
                        "    // this.$ref.xxx 是引用当前组件中的 xxx 元素的引用",
                        "    // 这里 xxx 即 MyComponent 子组件的 VueComponent 对象。",
                        "    // 其 $on 方法用于自定义事件的监听，也就是事件的绑定，实现了和 v-on 一样的效果",
                        "    this.$ref.xxx.$on(\"myevent\", this.myCallback)",
                        "  }",
                        "}",
                        "</script>"
                      ]
                    },
                    "",
                    "关键是穿山甲到底说了什么需要如何写. 了解清楚穿山甲到底说了什么到底是一种怎么样的存在, 是解决一切问题的关键. 既然如此, 通过这一次穿山甲到底说了什么，我会认真反省，深刻思考。",
                    "",
                    "",
                    "",
                    {
                      "lang": "html",
                      "code": [
                        "<template>",
                        "  <MyComponent ref=\"xxx\" />",
                        "</template>",
                        "",
                        "<script>",
                        "import MyComponent from \"./MyComponent.vue\"",
                        "export default {",
                        "  components: [MyComponent],",
                        "  methods:{",
                        "  myCallback(){",
                        "    console.log(\"myevent 事件的回调 myCallback 被调用了。\")",
                        "  }",
                        "  },",
                        "  mounted() {",
                        "    // this.$ref.xxx 是引用当前组件中的 xxx 元素的引用",
                        "    // 这里 xxx 即 MyComponent 子组件的 VueComponent 对象。",
                        "    // 其 $on 方法用于自定义事件的监听，也就是事件的绑定，实现了和 v-on 一样的效果",
                        "    this.$ref.xxx.$on(\"myevent\", this.myCallback)",
                        "  }",
                        "}",
                        "</script>"
                      ]
                    },
                    "",
                    "因此上面的过程相当于：",
                    "",
                    {
                      "lang": "html",
                      "code": [
                        "<template>",
                        "  <MyComponent ref=\"xxx\" />",
                        "</template>",
                        "",
                        "<script>",
                        "import MyComponent from \"./MyComponent.vue\"",
                        "export default {",
                        "  components: [MyComponent],",
                        "  methods:{",
                        "  myCallback(){",
                        "    console.log(\"myevent 事件的回调 myCallback 被调用了。\")",
                        "  }",
                        "  },",
                        "  mounted() {",
                        "    // this.$ref.xxx 是引用当前组件中的 xxx 元素的引用",
                        "    // 这里 xxx 即 MyComponent 子组件的 VueComponent 对象。",
                        "    // 其 $on 方法用于自定义事件的监听，也就是事件的绑定，实现了和 v-on 一样的效果",
                        "    this.$ref.xxx.$on(\"myevent\", this.myCallback)",
                        "  }",
                        "}",
                        "</script>"
                      ]
                    },
                    "",
                    "因而相当于：",
                    "",
                    {
                      "lang": "html",
                      "code": [
                        "<template>",
                        "  <MyComponent ref=\"xxx\" />",
                        "</template>",
                        "",
                        "<script>",
                        "import MyComponent from \"./MyComponent.vue\"",
                        "export default {",
                        "  components: [MyComponent],",
                        "  methods:{",
                        "  myCallback(){",
                        "    console.log(\"myevent 事件的回调 myCallback 被调用了。\")",
                        "  }",
                        "  },",
                        "  mounted() {",
                        "    // this.$ref.xxx 是引用当前组件中的 xxx 元素的引用",
                        "    // 这里 xxx 即 MyComponent 子组件的 VueComponent 对象。",
                        "    // 其 $on 方法用于自定义事件的监听，也就是事件的绑定，实现了和 v-on 一样的效果",
                        "    this.$ref.xxx.$on(\"myevent\", this.myCallback)",
                        "  }",
                        "}",
                        "</script>"
                      ]
                    },
                    "",
                    "先记住这个结论，后面我们还会用到。",
                    "",
                    "> 这里多插一句，有人自己无法分析是因为他实现 `Object.create` 的方法是思路是完全**错误**的，比如一个典型的错误但似乎可以用的实现：",
                    ">",
                    "> ```js",
                    "> // Object.create 的错误实现",
                    "> // 以下未曾实现Object.create ，只是通过 new  关键字间接调用了现有的 Object.create 方法",
                    "> function objectCreate(obj){",
                    ">   function F(){}; ",
                    ">   F.prototype = obj; ",
                    ">   return new F(); ",
                    "> }",
                    "> ```",
                    ">",
                    "> 这个实现中使用了 `new` 关键字，而实际上，实现 `new` 需要使用到 `Object.create()`函数，因此这是一个典型的套娃形式。",
                    "",
                    "",
                    "",
                    "![在这里插入图片描述](https://img-blog.csdnimg.cn/3b4bd12313c74d99b1a183280d8cb876.png#pic_center)",
                    "因此可以得出结论：",
                    "",
                    "",
                    "",
                    "",
                    "> **注：**",
                    "> 所以, 我们都知道, 只要有意义, 那么就必须慎重考虑. 要反思穿山甲到底说了什么行为。此时此刻，我对自己的内心进行了很多的思考。 我们一般认为, 抓住了问题的关键, 其他一切则会迎刃而解. 苏轼曾经提到过 : 古之立大事者，不惟有超世之才，亦必有坚忍不拔之志。这句",
                    ">",
                    "> ```js",
                    "> var vm = new Vue({",
                    ">   data: data",
                    "> })",
                    "> ```",
                    "",
                    "<div id=\"2-2\"></div>",
                    ""
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "header",
          "title": " [2.2 标题2-2](#2-2)",
          "level": 2,
          "children": [
            {
              "type": "plaintext",
              "children": [
                "",
                "<div id=\"2-2-1\"></div>",
                ""
              ]
            },
            {
              "type": "header",
              "title": " [2.2.1 标题2-2-1](#2-2-1)",
              "level": 3,
              "children": [
                {
                  "type": "plaintext",
                  "children": [
                    "",
                    "<div id=\"2-2-1-1\"></div>",
                    ""
                  ]
                },
                {
                  "type": "header",
                  "title": " [的话 :改变你的想](#2-2-1-1)",
                  "level": 4,
                  "children": [
                    {
                      "type": "plaintext",
                      "children": [
                        "",
                        "说了什**么行**为。此时此刻，我对自己的内心进行了很多的思考。 我们一般认为, 抓住了**问题的**关键, 其他一切则会迎刃而解. 苏轼曾经提到过 : 古之立大事者，不惟有超世之才，亦必有坚忍不拔之志。这句话把我们带到了一个新的维度去思考这个问题。 了解清楚穿山甲到底说了什么到底是一种 ",
                        "",
                        "",
                        {
                          "lang": "html",
                          "code": [
                            "<template>",
                            "  <MyComponent ref=\"xxx\" />",
                            "</template>",
                            "",
                            "<script>",
                            "import MyComponent from \"./MyComponent.vue\"",
                            "export default {",
                            "  components: [MyComponent],",
                            "  methods:{",
                            "  myCallback(){",
                            "    console.log(\"myevent 事件的回调 myCallback 被调用了。\")",
                            "  }",
                            "  },",
                            "  mounted() {",
                            "    // this.$ref.xxx 是引用当前组件中的 xxx 元素的引用",
                            "    // 这里 xxx 即 MyComponent 子组件的 VueComponent 对象。",
                            "    // 其 $on 方法用于自定义事件的监听，也就是事件的绑定，实现了和 v-on 一样的效果",
                            "    this.$ref.xxx.$on(\"myevent\", this.myCallback)",
                            "  }",
                            "}",
                            "</script>"
                          ]
                        },
                        "",
                        "文森特·皮尔说过一句富有哲理的话 : 改变你的想法，你就改变了自己的世界。带着这句话, 我们还要更加慎重的审视这个问题: 穿山甲到底说了什么因何而发生? ",
                        "",
                        "",
                        {
                          "lang": "html",
                          "code": [
                            "<template>",
                            "  <MyComponent ref=\"xxx\" />",
                            "</template>",
                            "",
                            "<script>",
                            "import MyComponent from \"./MyComponent.vue\"",
                            "export default {",
                            "  components: [MyComponent],",
                            "  methods:{",
                            "  myCallback(){",
                            "    console.log(\"myevent 事件的回调 myCallback 被调用了。\")",
                            "  }",
                            "  },",
                            "  mounted() {",
                            "    // this.$ref.xxx 是引用当前组件中的 xxx 元素的引用",
                            "    // 这里 xxx 即 MyComponent 子组件的 VueComponent 对象。",
                            "    // 其 $on 方法用于自定义事件的监听，也就是事件的绑定，实现了和 v-on 一样的效果",
                            "    this.$ref.xxx.$on(\"myevent\", this.myCallback)",
                            "  }",
                            "}",
                            "</script>"
                          ]
                        },
                        "",
                        "",
                        "",
                        "<div id=\"2-2-1-2\"></div>",
                        ""
                      ]
                    }
                  ]
                },
                {
                  "type": "header",
                  "title": " [通过 ref 绑定事件](#2-2-1-2)",
                  "level": 4,
                  "children": [
                    {
                      "type": "plaintext",
                      "children": [
                        "",
                        {
                          "lang": "html",
                          "code": [
                            "<template>",
                            "  <MyComponent ref=\"xxx\" />",
                            "</template>",
                            "",
                            "<script>",
                            "import MyComponent from \"./MyComponent.vue\"",
                            "export default {",
                            "  components: [MyComponent],",
                            "  methods:{",
                            "  myCallback(){",
                            "    console.log(\"myevent 事件的回调 myCallback 被调用了。\")",
                            "  }",
                            "  },",
                            "  mounted() {",
                            "    // this.$ref.xxx 是引用当前组件中的 xxx 元素的引用",
                            "    // 这里 xxx 即 MyComponent 子组件的 VueComponent 对象。",
                            "    // 其 $on 方法用于自定义事件的监听，也就是事件的绑定，实现了和 v-on 一样的效果",
                            "    this.$ref.xxx.$on(\"myevent\", this.myCallback)",
                            "  }",
                            "}",
                            "</script>"
                          ]
                        },
                        "",
                        "",
                        "<div id=\"3\"></div>",
                        ""
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "header",
      "title": " [3. 第三节](#3)",
      "level": 1,
      "children": [
        {
          "type": "plaintext",
          "children": [
            "",
            "我们还要更加慎重的审视这个问题: 穿山甲到底说了什么因何而发生? 现在, 解决穿山甲到底说了什么的问题, 是非常非常重要的. 所以, 我们都知道, 只要有意义, 那么就必须慎重考虑. 要反思穿山甲到底说了什么行为。此时此刻，我对自己的内心进行了很多的思考。 我们一般认为, 抓住了问题的关键, 其他一切则会迎刃而解. 苏轼曾经提到过 : 古之立大事者，不惟有超世之才，亦必有坚忍不拔之志。这句话把我们带到了一个新的维度去思考这个问题。 了解清楚穿山甲到底说了什么到底是一种怎么样的存在, 是解决一切问题的关键. 戴尔·卡耐基曾经说过 :多数人都拥有自己不了解的",
            ""
          ]
        },
        {
          "type": "header",
          "title": " [3.1 标题3-1](#3-1)",
          "level": 2,
          "children": [
            {
              "type": "plaintext",
              "children": [
                "",
                "<div id=\"4\"></div>",
                ""
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "header",
      "title": " [4. 第四节](#4)",
      "level": 1,
      "children": [
        {
          "type": "plaintext",
          "children": [
            "",
            ""
          ]
        },
        {
          "type": "header",
          "title": " [4.1 xwefcojkhfcv](##4-1)",
          "level": 2,
          "children": [
            {
              "type": "plaintext",
              "children": [
                "",
                "二分的付款计划，地方的房刚回来看见。价和反对寄给客户而规划框架你把途径美女不同人员交流。",
                ""
              ]
            }
          ]
        },
        {
          "type": "header",
          "title": " [4.2 OVIEUGRBAVHU](##4-2)",
          "level": 2,
          "children": [
            {
              "type": "plaintext",
              "children": [
                "",
                "现在, 解决穿山甲到底说了什么的问热铁皮国际化。",
                ""
              ]
            },
            {
              "type": "header",
              "title": " 4.2.1 微分几何发",
              "level": 3,
              "children": [
                {
                  "type": "plaintext",
                  "children": [
                    ""
                  ]
                },
                {
                  "type": "header",
                  "title": " 4.2.1.1 深度厉害开",
                  "level": 4,
                  "children": [
                    {
                      "type": "plaintext",
                      "children": [
                        "什么以后，才能真正的大彻大悟。 虽然有负面的不好的成长经历，却让我明白了很多做人处事的道理，有些道",
                        ""
                      ]
                    },
                    {
                      "type": "header",
                      "title": " 4.2.1.1.1 跑开了上法国",
                      "level": 5,
                      "children": [
                        {
                          "type": "plaintext",
                          "children": [
                            ""
                          ]
                        },
                        {
                          "type": "header",
                          "title": " 4.2.1.1.1 而多数人风口浪",
                          "level": 6,
                          "children": [
                            "",
                            "二通过哦健康和士大夫工人房推荐一款吗吐一口已经开了不能和规范",
                            ""
                          ]
                        },
                        {
                          "type": "header",
                          "title": " 4.2.1.1.2 弱它就哦",
                          "level": 6,
                          "children": [
                            "",
                            "我如果哦让她害怕的飞机飞过他认同感看见吧二公分撒额地方",
                            ""
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "header",
                  "title": " 4.2.1.2 他已经就",
                  "level": 4,
                  "children": [
                    {
                      "type": "plaintext",
                      "children": [
                        "是证明我们成功的决心还够坚强。 维这句话把我们带到了一个新的维度去思考这个问题。 了解清楚穿山甲到底说了什么到底是一种怎么样的存在, 是解决一切问题的关键. 本人也是经过了深思熟虑,在每个日",
                        ""
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "header",
              "title": " 4.2.2 儿童和的荣誉",
              "level": 3,
              "children": [
                {
                  "type": "plaintext",
                  "children": [
                    "",
                    ", 我们还要更加慎重的审视这个问题: 穿山甲到底说了什么因何而发生? 现在, 解决穿山甲到底说了什么的问题, 是非常非常重要的. 所以, 我们都知道, 只要有意义, 那么就必须慎重考虑. 要反思穿山甲到底说了什么行为。此时此刻，我对自己的内心进行了很多的思考。 我们一般认为, 抓住了问题的关键, 其他一切则会迎刃而解. 苏轼曾经提到过 : 古之立大事者，不惟有超世之才，亦必有坚忍不拔之志。这句话把我们带到了一个新的维度去思考这个问题。 了解清楚穿山甲到底说了什么到底是一种怎么样的存在, 是解决一切问题的关键. 戴尔·卡耐基曾经说过 :多数人都拥有自己不了解的"
                  ]
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}